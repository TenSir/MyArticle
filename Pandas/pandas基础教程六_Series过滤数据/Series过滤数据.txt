本文章我们我们就看看在Pandas中如何对Series进行数据过滤，已满足我们再数据分析过程中的需求。





**1.基于bool的索引过滤方法 **

假设我们有一个数据结构Series，我们想保留大于0的值，则：

```python
import pandas as pd
s = pd.Series([-1, 1.2345, 100, -50])
s1 = s[s>0]

# 输出
1      1.2345
2    100.0000
dtype: float64
```

这里的Bool值体现在哪里呢？不着急，如果我们直接输出[s>0]，则可以看到bool值的情况：
```python
[s>0]
# 输出
[0    False
 1    True
 2    True
 3    False
 dtype: bool]
```

以上就是基于bool值对索引的过滤方法，还是比较简单的。其实上述也是一种条件表达式的方式。



**2.基于条件表达式的过滤方法**

在传统的语言当中，我们经常使用条件表达式来进行代码语句的条件过滤，在pandas中我们也可以使用条件表达式来进行数据的过滤，比如我们找出上述Series中为偶数的数据：

```python
s = pd.Series([-1, 1.2345, 100, -50])
s2 = s[s % 2 == 0]
s2
# 输出
2    100.0
3    -50.0
dtype: float64
```

注意一点，我们在使用条件过滤数据的时候，会发现输出数据series的index是从2开始的（保留的是原数据的index），如果需要将index从0开始编号，我们需要进行reset_index()的操作：
```python
s = pd.Series([-1, 1.2345, 100, -50])
s2 = s[s % 2 == 0]
s2.reset_index()
```

![](0.png)



**3.基于标签的过滤方法**

基于标签的过滤值得是使用Series的index或column标签来进行数据的过滤方法，我们来看一下具体的实例：

```python
s = pd.Series([-1, 1.2345, 100, -50], index=['a', 'b', 'c', 'd'])
s3 = s[s.index.isin(['b','d'])]
s3
# 输出
b     1.2345
d    -50.0000
dtype: float64
```

上述案例的index是字符型的数据，在创建series的时候，如果不指定index,则其的index从0来时编号：

```python
ss = pd.Series([-1, 1.2345, 100, -50])
ss
# 输出
0     -1.0000
1      1.2345
2    100.0000
3    -50.0000
dtype: float64
```

可以看出默认的series的index是从0开始编号的。此时如果我们使用index进行过滤数据则有：
```python
s4 = s[s.index > 1]
s4
# 输出
2    100.0
3    -50.0
dtype: float64
```

这就是基于index的过滤方法，当然了，我们也可以基于列column来进行数据的过滤，此时我们需要将series转变为Dataframe来进行实验了，如：

```python
s = pd.Series([-1, 1.2345, 100, -50],name = 'RNUM')
df = s.to_frame(name='numbers')
df[df['numbers'].isin([1.2345, -50])]

# 输出是一个dataframe，如下所示：
```

![](1.png)

**4.使用where方法**

where方法也是可以用于数据过滤的，我们来看一下相关的案例：
```python 
s = pd.Series([-1, 1.2345, 100, -50])
s5 = s.where(s<0)
s5
# 输出
0    -1.0
1     NaN
2     NaN
3   -50.0
dtype: float64
```

上述结果中有NaN值的出现，为了除去其中的NaN值，我们这里使用dropna方法，代码如下:

```python
s5 = s5.dropna()
s5
# 输出
0    -1.0
3   -50.0
dtype: float64
# index的值不是连续的，如果有需要可以进行重置
```



**6.使用mask方法**

我们也可以使用其他的函数来对结果进行替换，这就是我们的mask方法：

```python
s = pd.Series([-1, 1.2345, 100, -50])
s6 = s.mask(s<0, -50)
s6
# 输出
0    -50.0000
1      1.2345
2    100.0000
3    -50.0000
dtype: float64
```

直接对不满足的数据进行替换还是很方便的，不需要进行第二次对的操作，大家可以看看mask函数的底层实现。



**5.使用drop方法**

drop()方法也能进行数据的过滤，从这个方法的名字上可以看出，该方法就有丢弃的含义，我们来看一下：
```python
s = pd.Series([-1, 1.2345, 100, -50],name = 'RNUM')
s7 = s.drop(s[s<0].index)
s7
# 输出
1      1.2345
2      100.0000
Name: RNUM, dtype: float64
```

上述方法丢弃了小于0的数据，从结果上也正好验证了这点，以后我们在过滤数据之后无需再次进行取数的操作，直接过滤取数即可。



**6.使用loc属性**

loc属性是基于标签的索引方法，也可以用于过滤相关的数据，比如说：

```python
s = pd.Series([-1, 1.2345, 100, -50], index=['a', 'b', 'c', 'd'])
s8 = s.loc[['a','d']]
s8

# 输出
a    -1.0
d    -50.0
dtype: float64
```

可以看出使用loc属性配合index就可以很好的进行数据的过滤。

如果index是模型的整数，则我们可以使用相似的方式来进行数据的过滤，如：

```python
s = pd.Series([-1, 1.2345, 100, -50])
s9 = s.loc[s> 2]
s9

# 输出
2    100.0
dtype: float64
```

对于index不是字符串类型的数据就直接使用Series本身去过滤数据即可。



以上就是基于Series进行数据过滤的相关知识介绍。























